# Classe order book snapshotter

import json
#from websocket import create_connection, WebSocketConnectionClosedException
#from gdax.public_client import PublicClient
from bintrees import RBTree
from decimal import Decimal
import requests


class obook(object):

    def __init__(self,product_id = 'BTC-USD'):

        self.product_id = product_id
        self.tref = datetime.datetime.fromtimestamp(0)

        self._asks = RBTree()
        self._bids = RBTree()

    def get_snapshot(self):        
        self._asks = RBTree()
        self._bids = RBTree()
        self.tref = datetime.datetime.now()
        
        params = {'level': 3}
        r = requests.get('https://api.gdax.com/products/{}/book'
                         .format(self.product_id), params=params, timeout=30)
        try:
            res = r.json()
        except:
            res['bids'] = {}
            res['asks'] = {}

        for bid in res['bids']:
            self.add({
                'id': bid[2],
                'side': 'buy',
                'price': Decimal(bid[0]),
                'size': Decimal(bid[1])
            })
        for ask in res['asks']:
            self.add({
                'id': ask[2],
                'side': 'sell',
                'price': Decimal(ask[0]),
                'size': Decimal(ask[1])
            })


    def get_current_book_serializable(self):
        result = {
            'Tref' : self.tref.strftime('%s'),
            'asks': [],
            'bids': [],
        }
        for ask in self._asks:
            try:
                # There can be a race condition here, where a price point is removed
                # between these two ops
                this_ask = self._asks[ask]
            except KeyError:
                continue
            for order in this_ask:
                result['asks'].append([float(order['price']), float(order['size']), order['id']])
        for bid in self._bids:
            try:
                # There can be a race condition here, where a price point is removed
                # between these two ops
                this_bid = self._bids[bid]
            except KeyError:
                continue

            for order in this_bid:
                result['bids'].append([float(order['price']), float(order['size']), order['id']])
        return result


    def add(self, order):
        order = {
            'id': order.get('order_id') or order['id'],
            'side': order['side'],
            'price': float(order['price']),
            'size': float(order.get('size') or order['remaining_size'])
        }
        if order['side'] == 'buy':
            bids = self.get_bids(order['price'])
            if bids is None:
                bids = [order]
            else:
                bids.append(order)
            self.set_bids(order['price'], bids)
        else:
            asks = self.get_asks(order['price'])
            if asks is None:
                asks = [order]
            else:
                asks.append(order)
            self.set_asks(order['price'], asks)      
     

    def get_bids(self, price):
        return self._bids.get(price)
    
    def set_bids(self, price, bids):
        self._bids.insert(price, bids)

    def get_asks(self, price):
        return self._asks.get(price)    
    
    def set_asks(self, price, asks):
        self._asks.insert(price, asks)    
        
        
if __name__ == "__main__":

    import json

    import time
    import datetime

    print('Start gdax collection...')

        
    outFolder = '/home/andre/tmp/'
    ob_btc = obook(product_id = 'BTC-USD')
    ob_eth = obook(product_id = 'ETH-USD')
    ob_ltc = obook(product_id = 'LTC-USD')

    booklive = dict()
    sleepTimeMinute = 2

    print ('Initialization Complete...')
    while 1:
        
        timeStamp = datetime.datetime.now()

        
        print('Start Iteration... '+ str(datetime.datetime.now()))
        
        ob_btc.get_snapshot()
        booklive['BTC-USD'] = ob_btc.get_current_book_serializable()
        print('BTC-USD complete')
        
        ob_eth.get_snapshot()
        booklive['ETH-USD'] = ob_eth.get_current_book_serializable()
        print('ETH-USD complete')
        
        ob_ltc.get_snapshot()
        booklive['LTC-USD'] = ob_ltc.get_current_book_serializable()
        print('LTC-USD complete')
        
        Fname = timeStamp.strftime('%Y%m%d')
        pathM = outFolder + Fname + '_gdaxSampler.json'

        with open (pathM,'a') as fileIO:
            fileIO.write(json.dumps(booklive))    

        print('End Iteration... '+ str(datetime.datetime.now()))
        time.sleep(sleepTimeMinute*60)
        
